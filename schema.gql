# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Avatar {
  _id: String!
  avatarUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  _id: ID!
  email: String!
  emailType: String!
  username: String!
  password: String
  firstName: String!
  lastName: String!
  phone: String!
  role: String!
  avatar: Avatar
  isBanned: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Admin {
  _id: ID!
  email: String!
  password: String
  firstName: String!
  lastName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AuthUser {
  _id: ID!
  email: String!
  emailType: String!
  username: String!
  password: String
  firstName: String!
  lastName: String!
  phone: String!
  role: String!
  avatar: Avatar
  isBanned: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  accessToken: String!
}

type AuthAdmin {
  _id: ID!
  email: String!
  password: String
  firstName: String!
  lastName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  accessToken: String!
}

type Comment {
  _id: String!
  user: User!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Media {
  _id: ID!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Notification {
  _id: ID!
  userId: String!
  reportId: String!
  createdAt: DateTime!
  detail: String!
  isWatched: Boolean!
  type: String!
}

type Progress {
  _id: String!
  user: User!
  detail: String!
  medias: [Media!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Location {
  _id: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Tag {
  _id: ID!
  name: String!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Status {
  admin: Admin
  type: String!
}

type Review {
  description: String
  medias: [Media!]
  star: Float
  createdAt: DateTime!
}

type Report {
  _id: ID!
  user: User!
  detail: String!
  title: String!
  locationDetail: String!
  status: Status
  location: Location
  upVotes: [User!]
  medias: [Media!]
  comments: [Comment!]
  progresses: [Progress!]
  tags: [Tag!]
  review: Review
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaginateReport {
  currentPage: Int!
  nextPage: Int!
  reports: [Report!]!
}

type AggregateTags {
  _id: ID!
  name: String!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  count: Int!
}

type Query {
  user(_id: String!): User
  users(_ids: [String!]!): [User!]
  getAllUsers: [User!]
  loginUser(email: String!, password: String!): AuthUser!
  getMeUser: AuthUser!
  rePasswordUser(oldPassword: String!, newPassword: String!): AuthUser!
  loginAdmin(email: String!, password: String!): AuthUser!
  getMeAdmin: AuthAdmin!
  getMe: AuthUser!
  admin(_id: String!): Admin
  report(_id: String!): Report
  reports(sort: String!, order: String!, filter: [String!]!, tags: [String!]!, page: Int!, pageAmount: Int!): PaginateReport
  findReportsByUserId: [Report!]
  trends: [Report!]
  getPopularTags(name: String!): [AggregateTags!]
  location(_id: [String!]!): Location!
  getAllLocations: [Location!]!
  getVerifiedTags: [Tag!]!
  getAllTags: [Tag!]!
  randomAvatar: Avatar!
  getAllAvatars: [Avatar!]!
  getNotifications: [Notification!]
}

type Mutation {
  updateUser(updateUserData: UpdateUserInput!): User
  updateAvatarUser: User!
  deleteUserById(deleteUserData: DeleteUserInput!): User
  registerUser(registerData: CreateUserInput!): AuthUser!
  deleteUser: User!
  registerAdmin(registerData: CreateAdminInput!): AuthAdmin!
  deleteAdmin: User!
  createReport(createReportData: CreateReportInput!): Report!
  createCommentReport(createCommentReportData: CreateCommentInput!): Report!
  createProgressReport(createProgressReportData: CreateProgressInput!): Report!
  updateStatusReport(updateStatusReportData: UpdateStatusReportInput!): Report!
  upVoteReport(_id: String!): Report!
  updateReviewReport(updateReviewReportData: UpdateReviewReportInput!): Report!
  deleteReport(deleteReportData: DeleteReportInput!): Report!
  createLocation(locationData: CreateLocationInput!): Location!
  createTag(createTagData: CreateTagInput!): Tag!
  updateStatusTag(updateTagData: UpdateTagInput!): Tag!
  createAvatar(createAvatarData: CreateAvatarInput!): Avatar!
  updateNotification(updateNotificationData: UpdateNotificationInput!): Notification
}

input UpdateUserInput {
  email: String
  emailType: String
  username: String
  firstName: String
  lastName: String
  phone: String
  role: String
  isBannned: Boolean
}

input DeleteUserInput {
  _id: String!
}

input CreateUserInput {
  email: String!
  emailType: String!
  username: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String!
  role: String!
}

input CreateAdminInput {
  email: String!
  username: String!
  password: String!
  firstName: String!
  lastName: String!
}

input CreateReportInput {
  detail: String!
  title: String!
  locationDetail: String!
  location: String!
  tags: [String!]
  medias: [CreateMediaInput!]
}

input CreateMediaInput {
  imageUrl: String!
}

input CreateCommentInput {
  reportId: String!
  body: String!
}

input CreateProgressInput {
  reportId: String!
  detail: String!
  medias: [CreateMediaInput!]
}

input UpdateStatusReportInput {
  reportId: String!
  type: String!
}

input UpdateReviewReportInput {
  reportId: String!
  description: String!
  medias: [CreateMediaInput!]
  star: Float!
}

input DeleteReportInput {
  _id: String!
}

input CreateLocationInput {
  name: String!
}

input CreateTagInput {
  name: String!
}

input UpdateTagInput {
  _id: String!
  status: String!
}

input CreateAvatarInput {
  avatarUrl: String!
}

input UpdateNotificationInput {
  _id: String
}